import numpy as np
import random
import matplotlib.pyplot as plt
from math import log, sqrt


class Bandit:

    def __init__(self, m, eps=None, upper_limit=None, method="eps"):
        """
        m = true mean
        mean = estimate of the bandit mean
        N = nr of arm pulls
        """
        self.m = m

        if method == "eps":
            try:
                float(eps)
                self.mean = 0
                self.N = 0
            except TypeError:
                print("For using Epsilon-Greedy you have to define epsilon")
                raise
        elif method == "upper_limit":
            try:
                float(upper_limit)
                self.mean = upper_limit
                self.N = 1
            except TypeError:
                print("For using Optimal Initial Value method you have to " +
                      "choose an initial value for the reward")
                raise
        elif method == "ucb1":
            self.mean = 0
            self.N = 1

    def pull(self):
        """
        Returns the bandit reward: a sample (or samples) from the “standard
        normal” distribution sampled from a univariate “normal” (Gaussian)
        distribution of mean 0 and variance 1"""
        return np.random.randn() + self.m

    def update(self, x):
        """
        Updates the rewards mean based on the latest sample received from the
        Bandit
        """
        self.N += 1
        self.mean = (1 - 1.0/self.N)*self.mean + 1.0/self.N * x


def run_experiment(m1, m2, m3, N, method="eps", eps=None, decay=True,
                   upper_limit=None):
    """
    m1, m2, m3 = means of the three bandits to be compared
    eps = epsilon for Epsilon-Greedy
    upper_limit = initial value for the mean reward estimate
    N = int, the number of times we pull
    Returns the cumulative average after every play
    """
    data = np.empty(N)
    if method == "eps":
        b1 = Bandit(m1, eps=eps)
        b2 = Bandit(m2, eps=eps)
        b3 = Bandit(m3, eps=eps)
        bandits = [b1, b2, b3]

        for i in range(N):
            if decay:
                eps = 1/(i + 0.01)
            p = np.random.random()
            # Epsilon - Greedy part
            if p < eps:
                chosen = random.choice([0, 1, 2])
                target = bandits[chosen]
            else:
                bandits_means = [bi.mean for bi in bandits]
                target = bandits[np.argmax(bandits_means)]

            new_reward = target.pull()
            target.update(new_reward)
            data[i] = new_reward
    elif method == "upper_limit" or method == "ucb1":
        b1 = Bandit(m1, upper_limit=upper_limit, method=method)
        b2 = Bandit(m2, upper_limit=upper_limit, method=method)
        b3 = Bandit(m3, upper_limit=upper_limit, method=method)
        bandits = [b1, b2, b3]

        if method == "upper_limit":
            for i in range(N):
                bandits_means = [bi.mean for bi in bandits]
                target = bandits[np.argmax(bandits_means)]

                new_reward = target.pull()
                target.update(new_reward)
                data[i] = new_reward
        elif method == "ucb1":
            for i in range(N):
                bandits_means = [bi.mean + sqrt(log(bi.N)/(N + pow(10, -5)))
                                 for bi in bandits]
                target = bandits[np.argmax(bandits_means)]

                new_reward = target.pull()
                target.update(new_reward)
                data[i] = new_reward
    else:
        raise ValueError("The explore-exploit method chosen is not recognized")

    cumulative_avg = np.cumsum(data) / (np.arange(N) + 1)

    plt.plot(cumulative_avg, label=method)
    plt.plot(np.ones(N)*m1)
    plt.plot(np.ones(N)*m2)
    plt.plot(np.ones(N)*m3)
    plt.xlabel("Iteration")
    plt.ylabel("Reward mean")

    print(b1.mean)
    print(b2.mean)
    print(b3.mean)


if __name__ == "__main__":
    N = 100000
    method = "eps"
    eps = 0.1
    plt.figure()
    exp1 = run_experiment(3.0, 2.0, 1.0, N, eps=0.1, decay=True, method=method)
    # exp2 = run_experiment(2.0, 2.0, 1.0, N, eps=0.05, method=method)
    # exp3 = run_experiment(2.0, 2.0, 1.0, N, eps=0.01, method=method)

    method2 = "upper_limit"
    exp2 = run_experiment(3.0, 2.0, 1.0, N, upper_limit=10, method=method2)

    method3 = "ucb1"
    exp3 = run_experiment(3.0, 2.0, 1.0, N, method=method3)

    plt.xscale('log')
    plt.legend()
    plt.show()
